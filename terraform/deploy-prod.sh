#!/bin/bash

# =============================================================================
# Finance Tracker Serverless - Deployment Script para Producci√≥n
# =============================================================================

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Variables
ENVIRONMENT="prod"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_DIR="${SCRIPT_DIR}/environments/${ENVIRONMENT}"

# Funci√≥n para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

log_critical() {
    echo -e "${RED}üö® CR√çTICO: $1${NC}"
}

# Funci√≥n para verificar prerrequisitos
check_prerequisites() {
    log "Verificando prerrequisitos para PRODUCCI√ìN..."
    
    # Verificar Terraform
    if ! command -v terraform &> /dev/null; then
        log_error "Terraform no est√° instalado. Inst√°lalo desde: https://www.terraform.io/downloads.html"
        exit 1
    fi
    
    # Verificar AWS CLI
    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI no est√° instalado. Inst√°lalo desde: https://aws.amazon.com/cli/"
        exit 1
    fi
    
    # Verificar credenciales AWS
    if ! aws sts get-caller-identity &> /dev/null; then
        log_error "No se encontraron credenciales de AWS v√°lidas. Config√∫ralas con 'aws configure'"
        exit 1
    fi
    
    # Verificar que no estamos en una cuenta de desarrollo
    ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
    log_info "Desplegando en la cuenta AWS: ${ACCOUNT_ID}"
    
    # Verificar archivo terraform.tfvars
    if [ ! -f "${ENV_DIR}/terraform.tfvars" ]; then
        log_error "No se encontr√≥ el archivo terraform.tfvars en ${ENV_DIR}/"
        log_info "Copia terraform.tfvars.example como terraform.tfvars y config√∫ralo"
        exit 1
    fi
    
    # Verificar que CORS origins no contengan localhost o wildcards
    if grep -q "localhost\|*" "${ENV_DIR}/terraform.tfvars" 2>/dev/null; then
        log_warning "‚ö†Ô∏è  Se encontraron configuraciones de desarrollo en terraform.tfvars"
        log_warning "Verifica que cors_allowed_origins est√© configurado para producci√≥n"
    fi
    
    log_success "Todos los prerrequisitos est√°n configurados"
}

# Funci√≥n para mostrar informaci√≥n del entorno
show_environment_info() {
    echo
    echo -e "${RED}üö® Finance Tracker - Deployment de PRODUCCI√ìN üö®${NC}"
    echo -e "${RED}====================================================${NC}"
    echo
    log_critical "¬°ESTE ES UN DEPLOYMENT DE PRODUCCI√ìN!"
    log_warning "Todos los cambios afectar√°n el entorno en vivo"
    echo
    log_info "Entorno: ${ENVIRONMENT}"
    log_info "Directorio: ${ENV_DIR}"
    log_info "Usuario AWS: $(aws sts get-caller-identity --query 'Arn' --output text)"
    log_info "Regi√≥n: $(aws configure get region)"
    log_info "Cuenta AWS: $(aws sts get-caller-identity --query 'Account' --output text)"
    echo
}

# Funci√≥n para confirmar deployment de producci√≥n
confirm_production_deployment() {
    echo
    log_critical "CONFIRMACI√ìN DE PRODUCCI√ìN"
    echo -e "${RED}================================${NC}"
    echo
    log_warning "¬øHas probado estos cambios en desarrollo? (y/N)"
    read -r dev_tested
    if [[ ! "$dev_tested" =~ ^[Yy]$ ]]; then
        log_error "Prueba los cambios en desarrollo primero"
        exit 1
    fi
    
    log_warning "¬øTienes un respaldo de la configuraci√≥n actual? (y/N)"
    read -r backup_confirmed
    if [[ ! "$backup_confirmed" =~ ^[Yy]$ ]]; then
        log_error "Aseg√∫rate de tener respaldos antes de continuar"
        exit 1
    fi
    
    log_warning "¬øConfirmas que quieres hacer deployment a PRODUCCI√ìN? (y/N)"
    read -r prod_confirmed
    if [[ ! "$prod_confirmed" =~ ^[Yy]$ ]]; then
        log_info "Deployment cancelado"
        exit 0
    fi
    
    echo
    log_success "Confirmaciones de producci√≥n completadas"
}

# Funci√≥n para deployment
deploy() {
    log "Iniciando deployment CR√çTICO para entorno ${ENVIRONMENT}..."
    
    cd "${ENV_DIR}"
    
    # Terraform init
    log "Inicializando Terraform..."
    terraform init
    
    # Terraform plan
    log "Generando plan de Terraform..."
    terraform plan -out=tfplan
    
    # Mostrar plan y confirmar
    echo
    log_warning "Revisa cuidadosamente el plan anterior."
    log_warning "¬øContinuar con el deployment de PRODUCCI√ìN? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        log_info "Deployment cancelado"
        rm -f tfplan
        exit 0
    fi
    
    # Terraform apply
    log "Aplicando cambios en PRODUCCI√ìN..."
    terraform apply tfplan
    
    # Limpiar plan file
    rm -f tfplan
    
    log_success "¬°Deployment de PRODUCCI√ìN completado exitosamente!"
}

# Funci√≥n para mostrar outputs
show_outputs() {
    cd "${ENV_DIR}"
    
    echo
    echo -e "${GREEN}üìã Informaci√≥n del Deployment de Producci√≥n${NC}"
    echo -e "${GREEN}=============================================${NC}"
    
    # Health Check URL
    HEALTH_URL=$(terraform output -raw health_check_url 2>/dev/null || echo "No disponible")
    echo
    log_info "Health Check URL: ${HEALTH_URL}"
    
    # API Gateway URL
    API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "No disponible")
    log_info "API Gateway URL: ${API_URL}"
    
    # Mostrar summary si est√° disponible
    if terraform output prod_deployment_summary &>/dev/null; then
        echo
        terraform output -raw prod_deployment_summary
    fi
    
    # Informaci√≥n de monitoreo
    echo
    log_info "üìä Comandos de Monitoreo:"
    echo "  ‚Ä¢ Logs Lambda: terraform output -json monitoring_commands"
    echo "  ‚Ä¢ CloudWatch Console: terraform output -json documentation_urls"
    echo "  ‚Ä¢ Todas las salidas: terraform output"
}

# Funci√≥n para test completo de producci√≥n
test_deployment() {
    cd "${ENV_DIR}"
    
    HEALTH_URL=$(terraform output -raw health_check_url 2>/dev/null)
    
    if [ -n "$HEALTH_URL" ]; then
        echo
        log "Probando el deployment de PRODUCCI√ìN..."
        
        # Test de health check
        if curl -f -s "$HEALTH_URL" > /dev/null; then
            log_success "‚úÖ Health check de producci√≥n pas√≥ correctamente"
            echo
            log_info "Respuesta del health check:"
            curl -s "$HEALTH_URL" | jq . 2>/dev/null || curl -s "$HEALTH_URL"
        else
            log_error "‚ùå Health check de producci√≥n fall√≥"
            log_warning "Revisa los logs de CloudWatch inmediatamente"
            return 1
        fi
        
        # Test de endpoints principales
        API_URL=$(terraform output -raw api_gateway_url 2>/dev/null)
        if [ -n "$API_URL" ]; then
            echo
            log "Probando endpoints principales..."
            
            # Test de CORS preflight
            if curl -f -s -X OPTIONS -H "Origin: https://example.com" "$API_URL/health" > /dev/null; then
                log_success "‚úÖ CORS configurado correctamente"
            else
                log_warning "‚ö†Ô∏è  CORS puede no estar configurado correctamente"
            fi
        fi
        
        echo
        log_success "‚úÖ Tests b√°sicos de producci√≥n completados"
        log_info "Monitorea los logs durante los pr√≥ximos minutos"
    fi
}

# Funci√≥n para verificar estado de alarmas
check_alarms() {
    cd "${ENV_DIR}"
    
    echo
    log "Verificando estado de alarmas de CloudWatch..."
    
    # Obtener lista de alarmas si est√°n configuradas
    if terraform output cloudwatch_alarms &>/dev/null; then
        log_info "Alarmas configuradas correctamente"
        log_info "Usa 'aws cloudwatch describe-alarms --region $(aws configure get region)' para verificar estado"
    else
        log_warning "No se encontraron alarmas configuradas"
    fi
}

# Funci√≥n para limpiar recursos (destroy) - M√ÅS RESTRICTIVO
destroy() {
    cd "${ENV_DIR}"
    
    echo
    log_critical "¬°PELIGRO: DESTRUCCI√ìN DE RECURSOS DE PRODUCCI√ìN!"
    echo -e "${RED}=================================================${NC}"
    echo
    log_error "Esta acci√≥n ELIMINAR√Å TODOS los recursos de producci√≥n"
    log_error "Esto incluye bases de datos, backups, y toda la infraestructura"
    echo
    log_warning "¬øHas exportado todos los datos importantes? (y/N)"
    read -r data_exported
    if [[ ! "$data_exported" =~ ^[Yy]$ ]]; then
        log_error "Exporta los datos importantes antes de continuar"
        exit 1
    fi
    
    log_warning "¬øTienes autorizaci√≥n para destruir recursos de producci√≥n? (y/N)"
    read -r authorization
    if [[ ! "$authorization" =~ ^[Yy]$ ]]; then
        log_error "Obt√©n autorizaci√≥n antes de continuar"
        exit 1
    fi
    
    log_warning "Escribe 'DELETE PRODUCTION' para confirmar:"
    read -r confirmation
    if [[ "$confirmation" != "DELETE PRODUCTION" ]]; then
        log_info "Destrucci√≥n cancelada"
        exit 0
    fi
    
    log "Destruyendo recursos de PRODUCCI√ìN..."
    terraform destroy
    log_success "Recursos de producci√≥n destruidos"
}

# Funci√≥n principal
main() {
    case "${1:-deploy}" in
        "deploy")
            show_environment_info
            check_prerequisites
            confirm_production_deployment
            deploy
            show_outputs
            test_deployment
            check_alarms
            ;;
        "destroy")
            show_environment_info
            check_prerequisites
            destroy
            ;;
        "plan")
            show_environment_info
            check_prerequisites
            cd "${ENV_DIR}"
            terraform init
            terraform plan
            ;;
        "outputs")
            cd "${ENV_DIR}"
            show_outputs
            ;;
        "test")
            cd "${ENV_DIR}"
            test_deployment
            ;;
        "status")
            cd "${ENV_DIR}"
            show_outputs
            test_deployment
            check_alarms
            ;;
        *)
            echo "Uso: $0 [deploy|destroy|plan|outputs|test|status]"
            echo
            echo "Comandos para PRODUCCI√ìN:"
            echo "  deploy   - Desplegar el entorno de producci√≥n (default)"
            echo "  destroy  - Destruir todos los recursos (PELIGROSO)"
            echo "  plan     - Mostrar el plan de cambios"
            echo "  outputs  - Mostrar los outputs del deployment"
            echo "  test     - Probar el deployment"
            echo "  status   - Mostrar estado completo y hacer tests"
            echo
            echo "‚ö†Ô∏è  ADVERTENCIA: Este script maneja recursos de PRODUCCI√ìN"
            exit 1
            ;;
    esac
}

main "$@"
