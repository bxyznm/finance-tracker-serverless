# =============================================================================
# Workflow Automatizado para Despliegue de Frontend
# =============================================================================
# Este workflow automatiza completamente el proceso de build y deploy del frontend
# Se ejecuta automáticamente en pushes a main o manualmente

name: Deploy Frontend

on:
  # Trigger automático en pushes a main que modifiquen el frontend
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  
  # Trigger manual para deploys on-demand
  workflow_dispatch:
    inputs:
      action:
        description: 'Acción a realizar'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
      environment:
        description: 'Ambiente de despliegue'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      force_rebuild:
        description: 'Forzar rebuild completo (ignora caché)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Saltar tests (solo para desarrollo)'
        required: false
        default: false
        type: boolean
      confirm_destroy:
        description: '⚠️ CONFIRMAR DESTRUCCIÓN (escribir "DESTROY" para confirmar)'
        required: false
        default: ''
        type: string

permissions:
  contents: read
  id-token: write

env:
  # Configuración AWS para región de México
  AWS_REGION: mx-central-1
  AWS_DEFAULT_REGION: mx-central-1
  
  # Configuración de Node.js
  NODE_VERSION: '18'
  
  # Configuración de caché
  CACHE_VERSION: v1

jobs:
  # =============================================================================
  # Job de Verificación y Preparación
  # =============================================================================
  prepare:
    name: 🔍 Preparar y Verificar
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy' || github.event.inputs.action == null
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      cache_key: ${{ steps.setup.outputs.cache_key }}
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: ⚙️ Configurar ambiente
        id: setup
        run: |
          # Determinar ambiente
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ inputs.environment }}"
          else
            ENVIRONMENT="dev"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "cache_key=frontend-${{ env.CACHE_VERSION }}-${{ hashFiles('frontend/package-lock.json') }}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Ambiente seleccionado: $ENVIRONMENT"
      
      - name: 🔍 Detectar cambios
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deploy manual solicitado"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Verificar si hay cambios en el frontend
            if git diff --name-only HEAD^ HEAD | grep -E '^frontend/' > /dev/null; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "✅ Cambios detectados en frontend"
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "⏭️ Sin cambios en frontend"
            fi
          fi

  # =============================================================================
  # Job de Build y Test
  # =============================================================================
  build-and-test:
    name: 🔨 Build y Test
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_deploy == 'true' && (github.event.inputs.action != 'destroy' || github.event.inputs.action == null)
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org/'
      
      - name: 🔧 Configurar caché npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('frontend/package-lock.json', 'frontend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-node-
      
      - name: 📋 Mostrar información del ambiente
        run: |
          echo "🔧 Información del Build:"
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"
          echo "Ambiente: ${{ needs.prepare.outputs.environment }}"
          echo "Directorio: $(pwd)"
      
      - name: 📦 Instalar dependencias
        working-directory: ./frontend
        run: |
          echo "📦 Instalando dependencias..."
          echo "Node: $(node --version), npm: $(npm --version)"
          
          # Limpiar caché npm si es necesario
          npm cache clean --force || true
          
          # Instalar dependencias
          if [[ -f "package-lock.json" ]]; then
            npm ci --prefer-offline --no-audit
          else
            npm install --prefer-offline --no-audit
          fi
          
          echo "📊 Información de dependencias:"
          npm list --depth=0 || true
      
      - name: 🧪 Ejecutar tests
        if: inputs.skip_tests != true
        working-directory: ./frontend
        run: |
          echo "🧪 Ejecutando tests..."
          npm test -- --coverage --watchAll=false --passWithNoTests
      
      - name: 🔍 Lint y verificaciones
        working-directory: ./frontend
        run: |
          echo "🔍 Verificando código..."
          # Si existe ESLint, ejecutarlo
          if npm list eslint &>/dev/null; then
            npm run lint --if-present || echo "⚠️ ESLint no configurado"
          fi
          
          # Verificar TypeScript si está configurado
          if [ -f "tsconfig.json" ]; then
            echo "🔍 Verificando TypeScript..."
            npx tsc --noEmit || echo "⚠️ TypeScript check falló"
          fi
      
      - name: 🏗️ Build aplicación
        working-directory: ./frontend
        env:
          CI: true
          GENERATE_SOURCEMAP: false
          NODE_ENV: production
        run: |
          echo "🏗️ Construyendo aplicación..."
          npm run build
          
          echo "📊 Información del build:"
          du -sh build/
          ls -la build/
          
          # Verificar archivos críticos
          if [ ! -f "build/index.html" ]; then
            echo "❌ Error: index.html no encontrado"
            exit 1
          fi
          
          echo "✅ Build completado exitosamente"
      
      - name: 📤 Subir artefactos de build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ needs.prepare.outputs.environment }}
          path: frontend/build/
          retention-days: 7

  # =============================================================================
  # Job de Despliegue
  # =============================================================================
  deploy:
    name: 🚀 Desplegar a AWS
    runs-on: ubuntu-latest
    needs: [prepare, build-and-test]
    if: needs.prepare.outputs.should_deploy == 'true' && (github.event.inputs.action != 'destroy' || github.event.inputs.action == null)
    environment: ${{ needs.prepare.outputs.environment }}
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 📤 Descargar artefactos de build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ needs.prepare.outputs.environment }}
          path: frontend/build/
      
      - name: ⚙️ Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: ✅ Verificar conexión AWS
        run: |
          echo "🔍 Verificando conexión a AWS..."
          aws sts get-caller-identity
          echo "🌍 Región activa: $(aws configure get region)"
      
      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false
      
      - name: 🏗️ Inicializar Terraform
        working-directory: ./terraform/frontend-only/environments/${{ needs.prepare.outputs.environment }}
        run: |
          echo "🔧 Inicializando Terraform FRONTEND-ONLY para ambiente: ${{ needs.prepare.outputs.environment }}"
          echo "📁 Estado se guardará en: frontend-only/${{ needs.prepare.outputs.environment }}/terraform.tfstate"
          echo "🛡️ Completamente separado del backend"
          
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
      
      - name: 📋 Planificar cambios de infraestructura
        working-directory: ./terraform/frontend-only/environments/${{ needs.prepare.outputs.environment }}
        run: |
          echo "📋 Ejecutando terraform plan para FRONTEND-ONLY ${{ needs.prepare.outputs.environment }}..."
          echo "🔍 Verificando que solo afecte recursos del frontend..."
          
          # Crear plan y guardarlo
          terraform plan -out=tfplan
          
          # Mostrar resumen de cambios
          echo "📊 Resumen de cambios planeados:"
          terraform show -no-color tfplan | head -30
          
          echo ""
          echo "🛡️ Verificando que SOLO se crean recursos de frontend..."
          echo "✅ Recursos esperados:"
          echo "  - S3 Bucket: finance-tracker-frontend-${{ needs.prepare.outputs.environment }}-{random}"
          echo "  - CloudFront Distribution" 
          echo "  - S3 Bucket Policy para frontend"
          echo "  - CloudFront Origin Access Control"
          echo ""
          echo "❌ NO debe tocar:"
          echo "  - DynamoDB tables del backend"
          echo "  - Lambda functions del backend" 
          echo "  - API Gateway del backend"
          echo "  - S3 deployment-assets del backend"
      
      - name: 🚀 Desplegar infraestructura
        working-directory: ./terraform/frontend-only/environments/${{ needs.prepare.outputs.environment }}
        run: |
          echo "🚀 Aplicando cambios de infraestructura FRONTEND-ONLY para ${{ needs.prepare.outputs.environment }}..."
          echo "⚠️  SOLO afectará recursos del frontend en el ambiente ${{ needs.prepare.outputs.environment }}"
          echo "🛡️ El backend permanece intacto"
          
          terraform apply -auto-approve tfplan
          
          echo "✅ Infraestructura de frontend desplegada correctamente"
      
      - name: 📊 Obtener información de infraestructura S3
        id: infra
        working-directory: ./terraform/frontend-only/environments/${{ needs.prepare.outputs.environment }}
        run: |
          echo "📋 Obteniendo información de la infraestructura S3 en México..."
          
          # Obtener outputs de la nueva configuración S3-only
          S3_BUCKET=$(terraform output -raw bucket_name)
          WEBSITE_ENDPOINT=$(terraform output -raw website_endpoint)
          WEBSITE_URL=$(terraform output -raw website_url)
          
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "website_endpoint=$WEBSITE_ENDPOINT" >> $GITHUB_OUTPUT
          echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          
          echo "✅ Información obtenida del S3 Website Hosting (México):"
          echo "  📦 S3 Bucket: $S3_BUCKET"
          echo "  🌐 Website Endpoint: $WEBSITE_ENDPOINT"
          echo "  🔗 Website URL: $WEBSITE_URL"
          echo "  🇲🇽 Región: mx-central-1"
          
          # Obtener configuración de Cloudflare (informativo)
          echo "📋 Configuración para Cloudflare:"
          terraform output cloudflare_configuration
      
      - name: 📝 Configurar variables de entorno para build
        working-directory: ./frontend
        run: |
          echo "📝 Configurando .env.production para S3 Website Hosting..."
          cat > .env.production << EOF
          REACT_APP_API_URL=https://jjb0khkiz0.execute-api.mx-central-1.amazonaws.com/dev
          REACT_APP_ENVIRONMENT=${{ needs.prepare.outputs.environment }}
          REACT_APP_FRONTEND_URL=${{ steps.infra.outputs.website_url }}
          REACT_APP_REGION=mx-central-1
          REACT_APP_COUNTRY=Mexico
          REACT_APP_LOCALE=es-MX
          REACT_APP_CURRENCY=MXN
          REACT_APP_TIMEZONE=America/Mexico_City
          GENERATE_SOURCEMAP=false
          PUBLIC_URL=/
          EOF
          
          echo "✅ Variables configuradas para México:"
          cat .env.production
      
      - name: ☁️ Sincronizar con S3
        run: |
          echo "☁️ Subiendo archivos a S3..."
          
          # Sincronizar archivos estáticos con caché largo (CSS, JS, imágenes)
          aws s3 sync frontend/build/ s3://${{ steps.infra.outputs.s3_bucket }}/ \
            --delete \
            --exact-timestamps \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "*.json"
            
          # Subir archivos HTML y JSON con caché corto
          aws s3 sync frontend/build/ s3://${{ steps.infra.outputs.s3_bucket }}/ \
            --exclude "*" \
            --include "*.html" \
            --include "*.json" \
            --metadata-directive REPLACE \
            --cache-control "public, max-age=0, must-revalidate"
          
          echo "✅ Archivos subidos exitosamente a S3 México"
      
      - name: ✅ Verificar despliegue S3 Website
        id: verify
        run: |
          echo "� Verificando que el S3 website esté funcionando..."
          
          # Verificar que el bucket tenga hosting web habilitado
          aws s3api get-bucket-website --bucket ${{ steps.infra.outputs.s3_bucket }}
          
          echo "✅ S3 Website Hosting configurado correctamente"
          echo "🌐 Endpoint: ${{ steps.infra.outputs.website_endpoint }}"
          
      - name: 📋 Mostrar instrucciones de Cloudflare
        run: |
          echo "🎯 PRÓXIMOS PASOS PARA CLOUDFLARE:"
          echo "=================================="
          echo ""
          echo "1. Ir a Cloudflare Dashboard → brxvn.xyz → DNS"
          echo "2. Crear registro CNAME:"
          echo "   Nombre: finance-tracker"
          echo "   Destino: ${{ steps.infra.outputs.website_endpoint }}"
          echo "3. Activar Cloudflare Proxy (nube naranja) = ON"
          echo "4. En SSL/TLS: Configurar modo 'Flexible'"
          echo "5. Esperar propagación DNS (5-10 minutos)"
          echo "6. Visitar https://finance-tracker.brxvn.xyz"
          echo ""
          echo "🇲🇽 Tu aplicación está desplegada en México Central (mx-central-1)"
      
      - name: 🧪 Verificar despliegue S3 Website
        run: |
          echo "🧪 Verificando despliegue S3 Website..."
          
          # Esperar un poco para propagación
          sleep 15
          
          # Verificar que el sitio responde
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.infra.outputs.website_url }}" || echo "000")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "✅ S3 Website respondiendo correctamente (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ S3 Website respondió con HTTP $HTTP_STATUS"
            echo "💡 Esto es normal - S3 necesita unos minutos para activar el website hosting"
          fi
      
      - name: 📊 Mostrar resumen del despliegue
        run: |
          echo "🎉 ¡DESPLIEGUE S3 WEBSITE COMPLETADO! 🇲🇽"
          echo "========================================"
          echo ""
          echo "📊 Información del Despliegue:"
          echo "🏷️  Ambiente: ${{ needs.prepare.outputs.environment }}"
          echo "�🇽 Región: mx-central-1 (México Central)"
          echo "🌐 S3 Website URL: ${{ steps.infra.outputs.website_url }}"
          echo "📦 S3 Bucket: ${{ steps.infra.outputs.s3_bucket }}"
          echo "🌍 Website Endpoint: ${{ steps.infra.outputs.website_endpoint }}"
          echo ""
          echo "🔗 Links Útiles:"
          echo "• S3 Website: ${{ steps.infra.outputs.website_url }}"
          echo "• S3 Console: https://s3.console.aws.amazon.com/s3/buckets/${{ steps.infra.outputs.s3_bucket }}"
          echo "• S3 Website Config: https://console.aws.amazon.com/s3/buckets/${{ steps.infra.outputs.s3_bucket }}?tab=properties&section=website"
          echo ""
          echo "📋 PRÓXIMOS PASOS PARA CLOUDFLARE:"
          echo "1. Crear CNAME: finance-tracker → ${{ steps.infra.outputs.website_endpoint }}"
          echo "2. Activar Proxy Cloudflare (nube naranja)"
          echo "3. SSL/TLS modo 'Flexible'"
          echo "4. Acceder a: https://finance-tracker.brxvn.xyz"

  # =============================================================================
  # Job de Notificaciones (opcional)
  # =============================================================================
  notify:
    name: 📢 Notificar Resultado
    runs-on: ubuntu-latest
    needs: [prepare, build-and-test, deploy]
    if: always() && needs.prepare.outputs.should_deploy == 'true' && (github.event.inputs.action != 'destroy' || github.event.inputs.action == null)
    
    steps:
      - name: 📢 Resultado del despliegue
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "🎉 ¡Despliegue exitoso!"
            echo "estado=success" >> $GITHUB_ENV
            echo "emoji=🎉" >> $GITHUB_ENV
            echo "mensaje=Despliegue completado exitosamente" >> $GITHUB_ENV
          else
            echo "❌ Despliegue falló"
            echo "estado=failure" >> $GITHUB_ENV
            echo "emoji=❌" >> $GITHUB_ENV  
            echo "mensaje=El despliegue falló" >> $GITHUB_ENV
          fi
          
          echo "📊 Resumen de Jobs:"
          echo "• Preparación: ${{ needs.prepare.result }}"
          echo "• Build y Test: ${{ needs.build-and-test.result }}"
          echo "• Despliegue: ${{ needs.deploy.result }}"
      
      # Aquí puedes agregar integraciones con Slack, Discord, etc.
      - name: 💬 Comentar en PR (si aplica)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const estado = process.env.estado;
            const emoji = process.env.emoji;
            const mensaje = process.env.mensaje;
            
            const comment = `${emoji} **Frontend Deploy - ${estado.toUpperCase()}**
            
            **Ambiente:** ${{ needs.prepare.outputs.environment }}
            **Estado:** ${mensaje}
            
            ${estado === 'success' ? '🔗 **Links:**' : ''}
            ${estado === 'success' ? '• [Ver Frontend](URL_WILL_BE_ADDED)' : ''}
            ${estado === 'success' ? '• [Ver API](URL_WILL_BE_ADDED)' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # =============================================================================
  # Job de Destrucción de Infraestructura
  # =============================================================================
  destroy:
    name: 🗑️ Destruir Frontend
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy == 'DESTROY'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: ⚠️ Verificar confirmación de destrucción
        run: |
          if [[ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]]; then
            echo "❌ ERROR: Para destruir la infraestructura debes escribir 'DESTROY' en el campo de confirmación"
            echo "🛡️ Esto es una medida de seguridad para evitar destrucciones accidentales"
            exit 1
          fi
          echo "✅ Confirmación de destrucción verificada"
          echo "⚠️ INICIANDO DESTRUCCIÓN DE INFRAESTRUCTURA DEL FRONTEND"
          echo "🎯 Ambiente: ${{ github.event.inputs.environment }}"
      
      - name: ⚙️ Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          terraform_wrapper: false
      
      - name: 📂 Navegar a directorio de Terraform
        working-directory: ./terraform/frontend-only/environments/${{ github.event.inputs.environment }}
        run: |
          echo "📂 Trabajando en directorio: $(pwd)"
          ls -la
      
      - name: ⚙️ Inicializar Terraform
        working-directory: ./terraform/frontend-only/environments/${{ github.event.inputs.environment }}
        run: |
          echo "🔧 Inicializando Terraform..."
          terraform init
      
      - name: 📋 Mostrar plan de destrucción
        working-directory: ./terraform/frontend-only/environments/${{ github.event.inputs.environment }}
        run: |
          echo "📋 Generando plan de destrucción..."
          terraform plan -destroy -detailed-exitcode
          
          echo ""
          echo "⚠️ RECURSOS QUE SERÁN DESTRUIDOS:"
          echo "=================================="
          terraform show -json | jq -r '.values.root_module.resources[]? | select(.type == "aws_s3_bucket") | "🗑️ S3 Bucket: " + .values.bucket'
          terraform show -json | jq -r '.values.root_module.resources[]? | select(.type == "aws_s3_object") | "🗑️ S3 Object: " + .values.key'
      
      - name: 🗑️ Destruir infraestructura
        working-directory: ./terraform/frontend-only/environments/${{ github.event.inputs.environment }}
        run: |
          echo "🗑️ INICIANDO DESTRUCCIÓN..."
          echo "⚠️ Esto eliminará PERMANENTEMENTE toda la infraestructura del frontend"
          echo ""
          
          # Mostrar qué se va a destruir
          terraform destroy -auto-approve
          
          echo ""
          echo "✅ DESTRUCCIÓN COMPLETADA"
          echo "========================="
          echo "🗑️ Toda la infraestructura del frontend ha sido eliminada"
          echo "💰 Esto evitará costos futuros de AWS"
          echo "⚠️ Para volver a desplegar, ejecuta este workflow con acción 'deploy'"
      
      - name: 📊 Resumen de destrucción
        run: |
          echo "📊 RESUMEN DE DESTRUCCIÓN"
          echo "========================="
          echo ""
          echo "✅ Recursos eliminados:"
          echo "  🗑️ S3 Bucket: finance-tracker.brxvn.xyz"
          echo "  🗑️ S3 Website Configuration"
          echo "  🗑️ S3 Bucket Policy"
          echo "  🗑️ S3 CORS Configuration"
          echo "  🗑️ Archivos de configuración"
          echo ""
          echo "📋 Próximos pasos:"
          echo "  1. ⚠️ El dominio finance-tracker.brxvn.xyz ya no funcionará"
          echo "  2. 🔧 Puedes eliminar el CNAME de Cloudflare si quieres"
          echo "  3. 🚀 Para volver a desplegar, ejecuta este workflow con 'deploy'"
          echo ""
          echo "💡 Nota: Esta acción es IRREVERSIBLE"

  # =============================================================================
  # Job de Verificación de Acción No Válida
  # =============================================================================
  invalid_destroy:
    name: ❌ Destrucción No Confirmada
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy' && github.event.inputs.confirm_destroy != 'DESTROY'
    
    steps:
      - name: ❌ Error de confirmación
        run: |
          echo "❌ ERROR: DESTRUCCIÓN NO CONFIRMADA"
          echo "=================================="
          echo ""
          echo "🛡️ Para destruir la infraestructura debes:"
          echo "  1. Seleccionar acción 'destroy'"
          echo "  2. Escribir exactamente 'DESTROY' en el campo de confirmación"
          echo ""
          echo "⚠️ Esto es una medida de seguridad para evitar eliminaciones accidentales"
          echo "💡 Si realmente quieres destruir la infraestructura, vuelve a ejecutar el workflow"
          exit 1
