# Workflow para empaquetar y crear releases del backend
# Crea tags automáticos con formato: v-dev-main-{number}
name: Package Backend & Create Release

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment for release'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      force_release:
        description: 'Force create release even without changes'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

env:
  AWS_REGION: mx-central-1

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para obtener todos los tags

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-prod.txt --target ./package
          
      - name: Package backend code
        working-directory: ./backend
        run: |
          echo "📦 Empaquetando código backend..."
          
          # Crear directorio temporal para el paquete
          mkdir -p ./dist
          
          # Copiar código fuente
          cp -r src/* ./package/
          
          # Crear el archivo ZIP del código
          cd package
          zip -r ../dist/code.zip . -x "*.pyc" "*__pycache__*" "*.git*"
          cd ..
          
          # Crear el archivo ZIP de dependencias para Lambda Layer
          mkdir -p layer/python
          cp -r package/* layer/python/
          cd layer
          zip -r ../dist/layer.zip . -x "*.pyc" "*__pycache__*"
          cd ..
          
          echo "✅ Paquetes creados:"
          ls -la dist/

      - name: Generate version tag
        id: version
        run: |
          # Obtener ambiente (dev por defecto)
          ENVIRONMENT="${{ inputs.environment || 'dev' }}"
          BRANCH="${{ github.ref_name }}"
          
          # Buscar el último tag para este ambiente y branch
          LATEST_TAG=$(git tag -l "v-${ENVIRONMENT}-${BRANCH}-*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            # Primer tag para este ambiente/branch
            NEW_NUMBER=1
          else
            # Extraer el número del último tag y aumentar en 1
            LAST_NUMBER=$(echo $LATEST_TAG | sed "s/v-${ENVIRONMENT}-${BRANCH}-//")
            NEW_NUMBER=$((LAST_NUMBER + 1))
          fi
          
          NEW_TAG="v-${ENVIRONMENT}-${BRANCH}-${NEW_NUMBER}"
          
          echo "tag=${NEW_TAG}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "number=${NEW_NUMBER}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Nuevo tag: ${NEW_TAG}"

      - name: Check for changes
        id: changes
        run: |
          # Si es workflow_dispatch con force_release, siempre crear release
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.force_release }}" = "true" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 Release forzado por usuario"
            exit 0
          fi
          
          # Verificar si hay cambios en backend o terraform desde el último tag
          LATEST_TAG=$(git tag -l "v-*-${{ github.ref_name }}-*" | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 Primer release para esta branch"
          else
            CHANGED_FILES=$(git diff --name-only $LATEST_TAG HEAD -- backend/ terraform/)
            if [ -n "$CHANGED_FILES" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "📝 Cambios detectados desde $LATEST_TAG:"
              echo "$CHANGED_FILES"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No hay cambios en backend/terraform desde $LATEST_TAG"
            fi
          fi

      - name: Create release
        if: steps.changes.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Backend Release ${{ steps.version.outputs.tag }}"
          body: |
            🚀 **Backend Release para ${{ steps.version.outputs.environment }}**
            
            **Información:**
            - **Ambiente:** ${{ steps.version.outputs.environment }}
            - **Branch:** ${{ steps.version.outputs.branch }}
            - **Versión:** ${{ steps.version.outputs.number }}
            - **Commit:** ${{ github.sha }}
            - **Actor:** ${{ github.actor }}
            
            **Archivos incluidos:**
            - `code.zip` - Código de las funciones Lambda
            - `layer.zip` - Layer con dependencias Python
            
            **Cambios recientes:**
            ${{ github.event.head_commit.message }}
            
            ---
            *Release creado automáticamente por GitHub Actions*
          files: |
            backend/dist/code.zip
            backend/dist/layer.zip
          draft: false
          prerelease: ${{ steps.version.outputs.environment == 'dev' }}
          generate_release_notes: true

      - name: Cleanup
        if: always()
        working-directory: ./backend
        run: |
          echo "🧹 Limpiando archivos temporales..."
          rm -rf package dist layer

      - name: Release Summary
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "## 🎉 Release Creado Exitosamente" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ steps.version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Ambiente:** ${{ steps.version.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ steps.version.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Archivos empaquetados:" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 \`code.zip\` - Código Lambda" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 \`layer.zip\` - Layer de dependencias" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Próximos pasos:" >> $GITHUB_STEP_SUMMARY
          echo "1. Ejecutar workflow de deployment de infraestructura" >> $GITHUB_STEP_SUMMARY
          echo "2. Usar tag \`${{ steps.version.outputs.tag }}\` en el deployment" >> $GITHUB_STEP_SUMMARY

      - name: No Changes Summary
        if: steps.changes.outputs.has_changes == 'false'
        run: |
          echo "## ℹ️ No se creó nuevo release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No se detectaron cambios en \`backend/\` o \`terraform/\` desde el último release." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Último tag:** \$(git tag -l \"v-*-${{ github.ref_name }}-*\" | sort -V | tail -n1)" >> $GITHUB_STEP_SUMMARY
