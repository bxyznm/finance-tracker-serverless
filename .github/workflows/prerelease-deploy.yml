# Workflow para crear pre-releases automáticos desde main
# Se ejecuta solo cuando hay cambios en backend/ o .github/workflows/
# Cualquier push a main con estos cambios genera un pre-release y despliega automáticamente a dev
name: Pre-Release Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/**'

permissions:
  contents: write
  actions: read
  id-token: write

env:
  AWS_REGION: mx-central-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show deployment info
        run: |
          echo "🚀 Pre-Release Deployment Info:"
          echo "   Rama: ${{ github.ref_name }}"
          echo "   Commit: ${{ github.sha }}"
          echo "   Ambiente: development (auto-deploy)"
          echo "   Ejecutado por: ${{ github.actor }}"
          echo "   Trigger: Cambios detectados en backend/ o .github/workflows/"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies and create ZIPs
        run: |
          cd backend/
          mkdir -p release/layer/python
          mkdir -p release/code
          
          # Actualizar pip para evitar problemas de compatibilidad
          pip install --upgrade pip setuptools wheel
          
          # Instalar dependencias de producción en el directorio layer/python (estructura AWS Lambda)
          pip install -r requirements-prod.txt -t release/layer/python --no-cache-dir --only-binary=all --implementation cp --abi abi3 --platform linux_x86_64
          
          # Verificar que pydantic se instaló correctamente en la estructura correcta
          if [ ! -d "release/layer/python/pydantic" ]; then
            echo "❌ Error: pydantic no se instaló correctamente en release/layer/python/"
            echo "📋 Contenido del directorio layer/python:"
            ls -la release/layer/python/
            exit 1
          fi
          echo "✅ pydantic instalado correctamente en estructura AWS Lambda"
          
          # Validar dependencias críticas
          echo "🔍 Validando dependencias críticas en el layer (estructura AWS Lambda)..."
          MISSING_DEPS=()
          for dep in pydantic boto3 fastapi bcrypt; do
            if [ ! -d "release/layer/python/$dep" ] && [ ! -d "release/layer/python/${dep}-"* ]; then
              MISSING_DEPS+=($dep)
            else
              echo "✅ $dep encontrado en release/layer/python/"
            fi
          done
          
          if [ ${#MISSING_DEPS[@]} -ne 0 ]; then
            echo "❌ Error: Dependencias faltantes: ${MISSING_DEPS[*]}"
            exit 1
          fi
          
          # Mostrar estructura del layer
          echo "📁 Estructura del layer AWS Lambda:"
          find release/layer/ -type d -maxdepth 2 | sort
          
          # Crear ZIP del layer con las dependencias (estructura AWS Lambda)
          cd release/layer
          zip -r ../layer.zip .
          cd ../..
          
          # Copiar código fuente y crear ZIP del código
          cp -r src/* release/code/
          cd release/code
          zip -r ../code.zip .
          
          # Información final
          echo "📊 Tamaños de archivos:"
          echo "  layer.zip: $(du -sh release/layer.zip | cut -f1)"
          echo "  code.zip: $(du -sh release/code.zip | cut -f1)"

      - name: Create Pre-Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v-dev-${{ github.ref_name }}-${{ github.run_number }}
          name: Finance Tracker Dev Pre-Release ${{ github.run_number }} (from ${{ github.ref_name }})
          body: |
            🚀 **Deployment automático a desarrollo**
            
            **Detalles del deployment:**
            - 🏷️ Ambiente: `development`
            - 🌿 Rama: `${{ github.ref_name }}`
            - 📝 Commit: `${{ github.sha }}`
            - ⏰ Fecha: ${{ github.event.head_commit.timestamp }}
            - 👤 Ejecutado por: ${{ github.actor }}
            
            **Contenido:**
            - 📦 **layer.zip**: Dependencias de producción para AWS Lambda Layer (estructura AWS Lambda correcta: python/)
            - 🔧 **code.zip**: Código fuente de las funciones Lambda
            
            **Endpoints Implementados:**
            - ✅ `GET /health` - Health check
            - ✅ `POST /users` - Registro de usuario  
            - ✅ `POST /users/login` - Login de usuario
            - ✅ `GET /users` - Listar usuarios [AUTH]
            - ✅ `GET/POST /transactions` - Transacciones [AUTH]
            - ✅ `GET/POST /categories` - Categorías [AUTH]
            
            > ⚡ Este pre-release se desplegará automáticamente al ambiente de desarrollo.
          files: |
            backend/release/layer.zip
            backend/release/code.zip
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Release Tag
        run: |
          echo "RELEASE_TAG=v-dev-${{ github.ref_name }}-${{ github.run_number }}" >> $GITHUB_ENV
          echo "$RELEASE_TAG"

      - name: Create pre-release summary
        run: |
          echo "# 🚀 Finance Tracker Pre-Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Tag** | \`$RELEASE_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | Push a \`${{ github.ref_name }}\` con cambios en backend/ |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ github.run_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Assets Creados" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ \`code.zip\` - Código de las funciones Lambda" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ \`layer.zip\` - Dependencias Python para Lambda (estructura AWS Lambda correcta)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔄 Próximos Pasos" >> $GITHUB_STEP_SUMMARY
          echo "Este pre-release activará automáticamente el deployment de infraestructura a **desarrollo**." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📡 Endpoints que se Desplegarán (Implementación Actual)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🔧 Sistema" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /health\` - Health check del sistema" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🔐 Autenticación y Usuarios" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /users\` - Registro de usuario" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /users/login\` - Iniciar sesión" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /users\` - Listar usuarios 🔒" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 💰 Transacciones" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /transactions\` - Listar transacciones 🔒" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /transactions\` - Crear transacción 🔒" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 📂 Categorías" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /categories\` - Listar categorías 🔒" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /categories\` - Crear categoría 🔒" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Nota:** 🔒 = Requiere autenticación JWT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Seguimiento" >> $GITHUB_STEP_SUMMARY
          echo "Monitorea el progreso del deployment en el [workflow de Infrastructure Deployment](../../actions/workflows/infrastructure.yml)." >> $GITHUB_STEP_SUMMARY
