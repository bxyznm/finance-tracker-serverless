# Workflow para crear releases automatizados con los zips del layer de dependencias 
# y el código de las funciones Lambda.
# Se ejecuta solo cuando hay cambios en backend/ o .github/workflows/
# - Automáticamente: cuando se hace push a la rama 'main'
# - Automáticamente: cuando se hace PR a la rama 'main'
# - Manualmente: usando workflow_dispatch
name: Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deployment'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show deployment info
        run: |
          echo "🚀 Información del Deployment:"
          echo "   Rama: ${{ github.ref_name }}"
          echo "   Commit: ${{ github.sha }}"
          echo "   Ambiente: ${{ inputs.environment || 'development' }}"
          echo "   Ejecutado por: ${{ github.event_name }}"
          echo "   Actor: ${{ github.actor }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "   ✅ Ejecución manual"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "   🔀 Ejecución automática por PR #${{ github.event.number }}"
          else
            echo "   ⚡ Ejecución automática por push"
          fi

      - name: Create deployment summary
        run: |
          echo "# 🚀 Finance Tracker Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Información del Deployment" >> $GITHUB_STEP_SUMMARY
          echo "| Variable | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Fecha** | \`$(date '+%Y-%m-%d %H:%M:%S UTC')\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Rama** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Ambiente** | \`${{ inputs.environment || 'development' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Ejecutado por** | \`${{ github.actor }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Evento** | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "| **PR** | [\`#${{ github.event.number }}\`](${{ github.event.pull_request.html_url }}) - ${{ github.event.pull_request.title }} |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd backend/
          mkdir -p release/layer/python
          mkdir -p release/code
          # Actualizar pip para evitar problemas de compatibilidad
          pip install --upgrade pip setuptools wheel
          # Instalar dependencias de producción en el directorio layer/python según AWS Lambda Layer spec
          # Usar approach más simple y compatible
          pip install -r requirements-prod.txt -t release/layer/python --no-cache-dir --upgrade
          # Verificar que pydantic se instaló correctamente en la estructura correcta
          if [ ! -d "release/layer/python/pydantic" ]; then
            echo "❌ Error: pydantic no se instaló correctamente en release/layer/python/"
            exit 1
          fi
          echo "✅ pydantic instalado correctamente en la estructura de layer AWS Lambda"
          ls -la release/layer/python/ | grep pydantic

      - name: Create ZIP files
        run: |
          cd backend/
          # Validar que las dependencias críticas estén presentes en la estructura correcta
          echo "🔍 Validando dependencias críticas en el layer (estructura AWS Lambda)..."
          MISSING_DEPS=()
          for dep in pydantic boto3 fastapi bcrypt; do
            if [ ! -d "release/layer/python/$dep" ] && [ ! -d "release/layer/python/${dep}-"* ]; then
              MISSING_DEPS+=($dep)
            else
              echo "✅ $dep encontrado en release/layer/python/"
            fi
          done
          
          if [ ${#MISSING_DEPS[@]} -ne 0 ]; then
            echo "❌ Error: Dependencias faltantes: ${MISSING_DEPS[*]}"
            echo "📋 Contenido del directorio layer/python:"
            ls -la release/layer/python/
            exit 1
          fi
          
          echo "🔍 Verificando estructura del layer AWS Lambda:"
          echo "📁 Estructura del layer:"
          tree release/layer/ -L 2 || find release/layer/ -type d -maxdepth 2
          
          # Crear ZIP del layer con las dependencias (estructura AWS Lambda)
          cd release/layer
          zip -r ../layer.zip .
          cd ../..
          
          # Copiar código fuente y crear ZIP del código
          cp -r src/* release/code/
          cd release/code
          zip -r ../code.zip .
          
          # Información final
          echo "📊 Tamaños de archivos:"
          echo "  layer.zip: $(du -sh release/layer.zip | cut -f1)"
          echo "  code.zip: $(du -sh release/code.zip | cut -f1)"
          
          # Verificar contenido del layer.zip final
          echo "🔍 Verificando estructura final del layer.zip:"
          unzip -l release/layer.zip | head -15

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ format('v{0}-{1}-{2}', inputs.environment || 'dev', github.ref_name, github.run_number) }}
          name: Finance Tracker ${{ inputs.environment || 'Development' }} Release ${{ github.run_number }} (from ${{ github.ref_name }})
          body: |
            ${{ github.event_name == 'workflow_dispatch' && format('🚀 Deployment manual al ambiente **{0}**', inputs.environment || 'development') || github.event_name == 'pull_request' && format('🔀 Deployment por PR #{0} al ambiente **development**', github.event.number) || '⚡ Deployment automático al ambiente **development**' }}
            
            **Detalles del deployment:**
            - 🏷️ Ambiente: `${{ inputs.environment || 'development' }}`
            - 🌿 Rama: `${{ github.ref_name }}`
            - 📝 Commit: `${{ github.sha }}`
            - ⏰ Fecha: ${{ github.event.head_commit.timestamp || github.event.repository.pushed_at }}
            - 👤 Ejecutado por: ${{ github.actor }}
            
            **Contenido:**
            - 📦 **layer.zip**: Dependencias de producción optimizadas para AWS Lambda Layer
            - 🔧 **code.zip**: Código fuente de las funciones Lambda
            
            ${{ github.event_name == 'workflow_dispatch' && '> ℹ️ Este deployment fue ejecutado manualmente.' || github.event_name == 'pull_request' && '> 🔄 Este deployment fue ejecutado por un Pull Request.' || '> ✅ Este deployment fue ejecutado automáticamente desde main.' }}
          files: |
            backend/release/layer.zip
            backend/release/code.zip
          draft: false
          prerelease: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Archivos Creados" >> $GITHUB_STEP_SUMMARY
          echo "| Archivo | Tamaño | Fecha de Creación |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **layer.zip** | \`$(du -h backend/release/layer.zip | cut -f1)\` | \`$(date '+%Y-%m-%d %H:%M:%S UTC')\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **code.zip** | \`$(du -h backend/release/code.zip | cut -f1)\` | \`$(date '+%Y-%m-%d %H:%M:%S UTC')\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Estado del Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependencias instaladas correctamente en estructura AWS Lambda (python/)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Archivos ZIP creados exitosamente" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Layer validado con estructura correcta para AWS Lambda Python" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Release publicado en GitHub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🌐 API Endpoints Implementados" >> $GITHUB_STEP_SUMMARY
          echo "Una vez desplegado por Terraform, la API estará disponible en:" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /health\` - Health check" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /users\` - Registro de usuarios" >> $GITHUB_STEP_SUMMARY
          echo "- \`POST /users/login\` - Login de usuarios" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET /users\` - Listar usuarios [AUTH]" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET/POST /transactions\` - Gestión de transacciones [AUTH]" >> $GITHUB_STEP_SUMMARY
          echo "- \`GET/POST /categories\` - Gestión de categorías [AUTH]" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag del Release:** \`${{ format('v{0}-{1}-{2}', inputs.environment || 'dev', github.ref_name, github.run_number) }}\`" >> $GITHUB_STEP_SUMMARY
