# =============================================================================
# Workflow para Configurar Dominio con Cloudflare
# =============================================================================
# Este workflow configura autom√°ticamente el DNS en Cloudflare

name: Setup Cloudflare Domain

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      domain_name:
        description: 'Dominio principal (ej: mifinanzas.com)'
        required: true
        type: string
      frontend_subdomain:
        description: 'Subdominio del frontend (ej: app)'
        required: true
        default: 'app'
        type: string
      update_terraform:
        description: 'Actualizar configuraci√≥n de Terraform'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: mx-central-1

jobs:
  setup-domain:
    name: üåê Configurar Dominio Cloudflare
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: ‚öôÔ∏è Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false
      
      - name: üìù Actualizar configuraci√≥n de Terraform
        if: inputs.update_terraform
        run: |
          echo "üìù Actualizando terraform.tfvars..."
          
          TFVARS_FILE="terraform/environments/${{ inputs.environment }}/terraform.tfvars"
          
          # Backup del archivo original
          cp "$TFVARS_FILE" "$TFVARS_FILE.backup"
          
          # Actualizar o agregar variables de dominio
          {
            grep -v "^domain_name\|^frontend_subdomain\|^use_custom_domain\|^cloudflare_integration" "$TFVARS_FILE" || true
            echo ""
            echo "# Configuraci√≥n de dominio personalizado"
            echo "domain_name = \"${{ inputs.domain_name }}\""
            echo "frontend_subdomain = \"${{ inputs.frontend_subdomain }}\""
            echo "use_custom_domain = true"
            echo "cloudflare_integration = true"
          } > "$TFVARS_FILE.new"
          
          mv "$TFVARS_FILE.new" "$TFVARS_FILE"
          
          echo "‚úÖ Configuraci√≥n actualizada:"
          echo "domain_name = \"${{ inputs.domain_name }}\""
          echo "frontend_subdomain = \"${{ inputs.frontend_subdomain }}\""
          echo "use_custom_domain = true"
          echo "cloudflare_integration = true"
      
      - name: üèóÔ∏è Aplicar cambios de Terraform
        if: inputs.update_terraform
        working-directory: ./terraform/environments/${{ inputs.environment }}
        run: |
          echo "üèóÔ∏è Aplicando cambios de infraestructura..."
          
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
          
          echo "‚úÖ Infraestructura actualizada"
      
      - name: üìä Obtener informaci√≥n de CloudFront
        id: cloudfront
        working-directory: ./terraform/environments/${{ inputs.environment }}
        run: |
          echo "üìä Obteniendo informaci√≥n de CloudFront..."
          
          terraform init
          
          CLOUDFRONT_DOMAIN=$(terraform output -raw frontend_cloudfront_domain_name)
          FRONTEND_URL=$(terraform output -raw frontend_url)
          
          echo "cloudfront_domain=$CLOUDFRONT_DOMAIN" >> $GITHUB_OUTPUT
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Informaci√≥n obtenida:"
          echo "  üì° CloudFront Domain: $CLOUDFRONT_DOMAIN"
          echo "  üåê Frontend URL: $FRONTEND_URL"
      
      - name: üåê Configurar DNS en Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          DOMAIN: ${{ inputs.domain_name }}
          SUBDOMAIN: ${{ inputs.frontend_subdomain }}
          CLOUDFRONT_DOMAIN: ${{ steps.cloudfront.outputs.cloudfront_domain }}
        run: |
          if [[ -z "$CLOUDFLARE_API_TOKEN" ]]; then
            echo "‚ö†Ô∏è CLOUDFLARE_API_TOKEN no configurado"
            echo "üìã Configuraci√≥n manual requerida:"
            echo ""
            echo "1. Ve a Cloudflare Dashboard > $DOMAIN > DNS"
            echo "2. Agrega un registro CNAME:"
            echo "   - Nombre: $SUBDOMAIN"
            echo "   - Contenido: $CLOUDFRONT_DOMAIN"
            echo "   - TTL: Auto"
            echo "   - Proxy status: Activado (nube naranja)"
            echo ""
            echo "3. Tu frontend estar√° disponible en: https://$SUBDOMAIN.$DOMAIN"
            exit 0
          fi
          
          echo "üåê Configurando DNS en Cloudflare..."
          
          # Obtener Zone ID
          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$DOMAIN" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | \
            jq -r '.result[0].id')
          
          if [[ "$ZONE_ID" == "null" || -z "$ZONE_ID" ]]; then
            echo "‚ùå No se pudo encontrar el dominio $DOMAIN en Cloudflare"
            exit 1
          fi
          
          echo "‚úÖ Zone ID encontrado: $ZONE_ID"
          
          # Verificar si el registro ya existe
          EXISTING_RECORD=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$SUBDOMAIN.$DOMAIN" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | \
            jq -r '.result[0].id // "null"')
          
          if [[ "$EXISTING_RECORD" != "null" ]]; then
            echo "üîÑ Actualizando registro existente..."
            
            RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$EXISTING_RECORD" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "CNAME",
                "name": "'$SUBDOMAIN'",
                "content": "'$CLOUDFRONT_DOMAIN'",
                "ttl": 1,
                "proxied": true
              }')
          else
            echo "‚ûï Creando nuevo registro DNS..."
            
            RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "CNAME",
                "name": "'$SUBDOMAIN'",
                "content": "'$CLOUDFRONT_DOMAIN'",
                "ttl": 1,
                "proxied": true
              }')
          fi
          
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          
          if [[ "$SUCCESS" == "true" ]]; then
            echo "‚úÖ Registro DNS configurado exitosamente"
            echo "üåê Frontend disponible en: https://$SUBDOMAIN.$DOMAIN"
          else
            echo "‚ùå Error al configurar DNS:"
            echo "$RESPONSE" | jq -r '.errors[]?.message // "Error desconocido"'
            exit 1
          fi
      
      - name: üß™ Verificar configuraci√≥n
        run: |
          FULL_DOMAIN="${{ inputs.frontend_subdomain }}.${{ inputs.domain_name }}"
          
          echo "üß™ Verificando configuraci√≥n DNS..."
          
          # Esperar propagaci√≥n DNS
          sleep 30
          
          # Verificar resoluci√≥n DNS
          echo "üîç Verificando resoluci√≥n DNS..."
          nslookup "$FULL_DOMAIN" || echo "‚ö†Ô∏è DNS a√∫n propag√°ndose"
          
          # Verificar HTTP
          echo "üåê Verificando acceso HTTP..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://$FULL_DOMAIN" || echo "000")
          
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ Dominio funcionando correctamente"
          else
            echo "‚ö†Ô∏è Dominio respondi√≥ con c√≥digo: $HTTP_STATUS"
            echo "üí° La propagaci√≥n DNS puede tomar hasta 24 horas"
          fi
      
      - name: üìä Commit cambios (si hay)
        if: inputs.update_terraform
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet; then
            echo "üìù No hay cambios para commitear"
          else
            git add terraform/environments/${{ inputs.environment }}/terraform.tfvars
            git commit -m "feat: configurar dominio ${{ inputs.frontend_subdomain }}.${{ inputs.domain_name }} para ${{ inputs.environment }}"
            git push
            echo "‚úÖ Cambios commiteados y pusheados"
          fi
      
      - name: üìä Resumen de configuraci√≥n
        run: |
          echo ""
          echo "üéâ ¬°CONFIGURACI√ìN DE DOMINIO COMPLETADA!"
          echo "====================================="
          echo ""
          echo "üè∑Ô∏è  Ambiente: ${{ inputs.environment }}"
          echo "üåê Dominio: ${{ inputs.frontend_subdomain }}.${{ inputs.domain_name }}"
          echo "üì° CloudFront: ${{ steps.cloudfront.outputs.cloudfront_domain }}"
          echo "üîó Frontend URL: ${{ steps.cloudfront.outputs.frontend_url }}"
          echo ""
          echo "üìã Configuraci√≥n aplicada:"
          echo "‚Ä¢ DNS CNAME: ${{ inputs.frontend_subdomain }} ‚Üí ${{ steps.cloudfront.outputs.cloudfront_domain }}"
          echo "‚Ä¢ Proxy Cloudflare: Activado"
          echo "‚Ä¢ TTL: Auto"
          echo ""
          echo "üí° Notas importantes:"
          echo "‚Ä¢ La propagaci√≥n DNS puede tomar hasta 24 horas"
          echo "‚Ä¢ Cloudflare provee SSL/TLS autom√°tico"
          echo "‚Ä¢ El cach√© de Cloudflare se combina con CloudFront"
          echo ""
          echo "üîó Accede a tu aplicaci√≥n en:"
          echo "https://${{ inputs.frontend_subdomain }}.${{ inputs.domain_name }}"
