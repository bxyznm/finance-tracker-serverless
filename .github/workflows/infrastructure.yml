# =============================================================================
# Finance Tracker Serverless - Infrastructure Deployment Workflow
# =============================================================================
# Este workflow despliega la infraestructura de Terraform usando los assets
# generados por el workflow de deployment (release/prerelease)
#
# Flujo:
# 1. PR a main → Deployment workflow crea prerelease → Este workflow despliega DEV
# 2. Push a main → Deployment workflow crea release → Este workflow despliega PROD

name: Infrastructure Deployment

on:
  # Ejecutar después del workflow de deployment
  workflow_run:
    workflows: ["Deployment"]
    types: [completed]
    branches: [main]
  
  # Ejecución manual para casos especiales
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a desplegar'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      release_tag:
        description: 'Tag del release específico (opcional, usa el último si está vacío)'
        required: false
        type: string
      destroy_first:
        description: 'Destruir infraestructura existente primero'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write # Para OIDC con AWS

env:
  AWS_REGION: mx-central-1
  TERRAFORM_VERSION: "1.7.0"

jobs:
  # Job para determinar qué entorno desplegar y qué release usar
  determine-deployment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
      release_tag: ${{ steps.determine.outputs.release_tag }}
      release_type: ${{ steps.determine.outputs.release_type }}
      should_deploy: ${{ steps.determine.outputs.should_deploy }}
    steps:
      - name: Determine deployment parameters
        id: determine
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Ejecución manual
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "release_tag=${{ inputs.release_tag }}" >> $GITHUB_OUTPUT
            echo "release_type=manual" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Ejecución automática después del deployment workflow
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              # Determinar entorno basado en el evento que triggereó el workflow anterior
              if [ "${{ github.event.workflow_run.event }}" = "pull_request" ]; then
                echo "environment=dev" >> $GITHUB_OUTPUT
                echo "release_tag=" >> $GITHUB_OUTPUT # Usará el último prerelease
                echo "release_type=prerelease" >> $GITHUB_OUTPUT
                echo "should_deploy=true" >> $GITHUB_OUTPUT
              elif [ "${{ github.event.workflow_run.event }}" = "push" ]; then
                echo "environment=prod" >> $GITHUB_OUTPUT
                echo "release_tag=" >> $GITHUB_OUTPUT # Usará el último release
                echo "release_type=release" >> $GITHUB_OUTPUT
                echo "should_deploy=true" >> $GITHUB_OUTPUT
              else
                echo "should_deploy=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Job de deployment para desarrollo
  deploy-dev:
    needs: determine-deployment
    if: needs.determine-deployment.outputs.should_deploy == 'true' && needs.determine-deployment.outputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: terraform-dev-session

      - name: Show deployment info
        run: |
          echo "🚀 Información del Deployment de Infraestructura:"
          echo "   Ambiente: dev"
          echo "   Release Type: ${{ needs.determine-deployment.outputs.release_type }}"
          echo "   Release Tag: ${{ needs.determine-deployment.outputs.release_tag || 'latest prerelease' }}"
          echo "   Trigger: ${{ github.event_name }}"
          echo "   AWS Account: $(aws sts get-caller-identity --query Account --output text)"

      - name: Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/environments/dev
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repository: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_dev_release_tag: ${{ needs.determine-deployment.outputs.release_tag }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform/environments/dev
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repository: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_dev_release_tag: ${{ needs.determine-deployment.outputs.release_tag }}
        run: terraform apply tfplan

      - name: Save Terraform outputs
        working-directory: terraform/environments/dev
        run: |
          terraform output -json > terraform-outputs.json
          echo "## 🚀 Development Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway URL:** \`$(terraform output -raw api_gateway_url)\`" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check URL:** \`$(terraform output -raw health_check_url)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** development" >> $GITHUB_STEP_SUMMARY
          echo "**Release Used:** $(terraform output -raw github_release_info | jq -r .tag_name)" >> $GITHUB_STEP_SUMMARY

      - name: Test deployment
        working-directory: terraform/environments/dev
        run: |
          HEALTH_URL=$(terraform output -raw health_check_url)
          echo "Testing health endpoint: $HEALTH_URL"
          
          # Esperar un poco para que Lambda esté listo
          sleep 30
          
          # Test health endpoint
          if curl -f -s --max-time 30 "$HEALTH_URL"; then
            echo "✅ Health check passed"
            echo "## ✅ Health Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "Development environment is healthy and ready to use." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Health check failed, but deployment completed"
            echo "## ⚠️ Health Check Failed" >> $GITHUB_STEP_SUMMARY  
            echo "Deployment completed but health check failed. Lambda may need a few more minutes to be ready." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Terraform state artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-dev-outputs
          path: terraform/environments/dev/terraform-outputs.json
          retention-days: 30

  # Job de deployment para producción
  deploy-prod:
    needs: determine-deployment
    if: needs.determine-deployment.outputs.should_deploy == 'true' && needs.determine-deployment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: terraform-prod-session

      - name: Show deployment info
        run: |
          echo "🚨 PRODUCTION DEPLOYMENT"
          echo "========================"
          echo "   Ambiente: production"
          echo "   Release Type: ${{ needs.determine-deployment.outputs.release_type }}"
          echo "   Release Tag: ${{ needs.determine-deployment.outputs.release_tag || 'latest release' }}"
          echo "   Trigger: ${{ github.event_name }}"
          echo "   AWS Account: $(aws sts get-caller-identity --query Account --output text)"

      - name: Destroy existing infrastructure (if requested)
        if: github.event_name == 'workflow_dispatch' && inputs.destroy_first == true
        working-directory: terraform/environments/prod
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repository: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
        run: |
          terraform init
          terraform destroy -auto-approve

      - name: Terraform Init
        working-directory: terraform/environments/prod
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/environments/prod
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repository: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_cors_allowed_origins: '["https://finance-tracker.tudominio.com"]' # TODO: Cambiar por dominio real
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform/environments/prod
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_repository: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
          TF_VAR_cors_allowed_origins: '["https://finance-tracker.tudominio.com"]' # TODO: Cambiar por dominio real
        run: terraform apply tfplan

      - name: Save Terraform outputs
        working-directory: terraform/environments/prod
        run: |
          terraform output -json > terraform-outputs.json
          echo "## 🚀 Production Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway URL:** \`$(terraform output -raw api_gateway_url)\`" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check URL:** \`$(terraform output -raw health_check_url)\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "**Release Used:** $(terraform output -raw github_release_info | jq -r .tag_name)" >> $GITHUB_STEP_SUMMARY
          echo "**Monitoring:** $(terraform output -json cloudwatch_alarms | jq length) CloudWatch alarms configured" >> $GITHUB_STEP_SUMMARY

      - name: Test production deployment
        working-directory: terraform/environments/prod
        run: |
          HEALTH_URL=$(terraform output -raw health_check_url)
          echo "Testing production health endpoint: $HEALTH_URL"
          
          # Esperar un poco para que Lambda esté listo
          sleep 30
          
          # Test health endpoint
          if curl -f -s --max-time 30 "$HEALTH_URL"; then
            echo "✅ Production health check passed"
            echo "## ✅ Production Health Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "Production environment is healthy and ready to serve traffic." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Production health check failed"
            echo "## ❌ Production Health Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "**CRITICAL:** Production deployment completed but health check failed. Immediate attention required." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload Terraform state artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-prod-outputs
          path: terraform/environments/prod/terraform-outputs.json
          retention-days: 90

  # Job de cleanup para deployments fallidos
  cleanup-on-failure:
    needs: [determine-deployment, deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment failure
        run: |
          echo "## ❌ Infrastructure Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The infrastructure deployment failed. Please check the logs and:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify AWS credentials and permissions" >> $GITHUB_STEP_SUMMARY
          echo "2. Check if GitHub release exists and contains required assets" >> $GITHUB_STEP_SUMMARY
          echo "3. Validate Terraform configuration" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider running manual cleanup if needed" >> $GITHUB_STEP_SUMMARY

  # Job de notificación de éxito
  notify-success:
    needs: [determine-deployment, deploy-dev, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🎉 Infrastructure Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-dev.result }}" = "success" ]; then
            echo "✅ **Development environment** deployed successfully" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-prod.result }}" = "success" ]; then
            echo "✅ **Production environment** deployed successfully" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Test the API endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor CloudWatch logs and metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Update frontend configuration with new API URLs if needed" >> $GITHUB_STEP_SUMMARY
